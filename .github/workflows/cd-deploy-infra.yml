name: CD - Deploy Infrastructure via Terraform

on:
  # Triggered by the CI repository sending a dispatch event
  repository_dispatch:
    types: [new-image-build] # Matches the event-type sent from CI workflow

  # Allows manual triggering from the GitHub Actions UI
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy (e.g., commit SHA)'
        required: true
      environment_config: # <--- NEW INPUT FOR MANUAL DISPATCH
        description: 'Environment configuration to use (e.g., dev, prod, staging)'
        required: true
        default: 'dev'
        type: choice
        options:
          - 'dev'
          - 'prod'
          - 'staging'

env:
  AWS_REGION: ap-south-1
  TF_VAR_container_image_tag: ${{ github.event.client_payload.image_tag || github.event.inputs.image_tag }} # Get tag from dispatch payload or manual input

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    env:
      # Determine target environment from either trigger and set it as an env var for the job
      TARGET_ENVIRONMENT: ${{ github.event.client_payload.environment_config || github.event.inputs.environment_config }}
    permissions:
      contents: read
      id-token: write # If using OIDC for Terraform

    steps:
    - name: Checkout Infrastructure Code (CD Repo)
      uses: actions/checkout@v4
      with:
        path: main-infra # Checkout infra code to a specific subdirectory

    # - name: Set Environment Configuration # <--- NEW STEP TO DETERMINE ENVIRONMENT
    #   id: set_environment
    #   run: |
    #     if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
    #       ENV_CONFIG="${{ github.event.inputs.environment_config }}"
    #     elif [ "${{ github.event_name }}" == "repository_dispatch" ]; then
    #       # Get environment from client_payload
    #       ENV_CONFIG="${{ github.event.client_payload.environment_config }}"
    #     fi
    #     echo "Determined Environment: $ENV_CONFIG"
    #     echo "environment_config=$ENV_CONFIG" >> "$GITHUB_OUTPUT"
    
    - name: Checkout TFVars from Config Repo
      uses: actions/checkout@v4
      with:
        repository: VedantDomadiya/hello-world-infra-configs # Replace with your config repo
        token: ${{ secrets.CONFIG_REPO_PAT }} 
        path: config-repo # Checkout config repo to a subdirectory
        ref: main # Or the branch where your tfvars are

    # Configure AWS Credentials (using OIDC or secrets)
    # Ensure these credentials have Terraform permissions (ECS, RDS, VPC, IAM, SecretsManager, etc.)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # - name: Determine TFVars Path
    #   id: tfvars_path
    #   run: echo "path=./config-repo/${{ steps.set_environment.outputs.environment_config }}/terraform.tfvars" >> $GITHUB_OUTPUT

    - name: Verify TFVars File
      run: |
        # Construct the absolute path to the tfvars file
        VAR_FILE_PATH="${{ github.workspace }}/config-repo/${{ env.TARGET_ENVIRONMENT }}/terraform.tfvars"
        echo "Verifying that tfvars file exists at absolute path: $VAR_FILE_PATH"
        if [ ! -f "$VAR_FILE_PATH" ]; then
          echo "Error: TFVars file not found at the expected path!"
          # List contents for debugging
          echo "--- Listing contents of config-repo ---"
          ls -R ${{ github.workspace }}/config-repo
          exit 1
        fi
        echo "TFVars file found successfully."

    - name: Terraform Init
      id: init
      # Run from the directory where the main Terraform code was checked out
      run: terraform -chdir=./main-infra/terraform init

    - name: Terraform Plan
      id: plan
      run: |
        # Use the absolute path to the tfvars file
        terraform -chdir=./main-infra/terraform plan -no-color -input=false \
          -var-file="${{ github.workspace }}/config-repo/${{ env.TARGET_ENVIRONMENT }}/terraform.tfvars" 
      # Note: The TF_VAR_container_image_tag set at the top level is still automatically picked up by Terraform

    - name: Terraform Apply
      id: apply
      run: |
        # Use the absolute path to the tfvars file again
        terraform -chdir=./main-infra/terraform apply -auto-approve -input=false \
          -var-file="${{ github.workspace }}/config-repo/${{ env.TARGET_ENVIRONMENT }}/terraform.tfvars"